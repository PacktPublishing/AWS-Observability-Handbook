AWSTemplateFormatVersion: 2010-09-09
Description: observability-app
Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL for Prod stage
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/Prod/'
  SampleTable:
    Value: !GetAtt 
      - SampleTable
      - Arn
    Description: Sample Data Table ARN
Resources:
  LambdaZipsBucket:
    Type: AWS::S3::Bucket
  CopyZips:
    Type: Custom::CopyZips
    Properties:
      ServiceToken: !GetAtt 'CopyZipsFunction.Arn'
      DestBucket: !Ref 'LambdaZipsBucket'
      SourceBucket: 'insiders-guide-observability-on-aws-book'
      Prefix: 'chapter-07/'
      Objects:
        - monitoring-app.zip
  CopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 'arn:aws:s3:::insiders-guide-observability-on-aws-book/chapter-07/*'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub 'arn:aws:s3:::${LambdaZipsBucket}/chapter-07/*'
  CopyZipsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt 'CopyZipsRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s'%dest_bucket)
                  print('key = %s' %key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket,
                        Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              # make sure we send a failure to CloudFormation if the function
              # is going to timeout
              timer = threading.Timer((context.get_remaining_time_in_millis()
                        / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)
  getByIdFunction:
    DependsOn: CopyZips
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub 'chapter-07/monitoring-app.zip'
      Description: >-
        A simple example includes a HTTP get method to get one item by id from a
        DynamoDB table.
      Handler: src/handlers/get-by-id.getByIdHandler
      MemorySize: 128
      Role: !GetAtt 
        - getByIdFunctionRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 100
      Environment:
        Variables:
          APP_NAME: !Ref SampleTable
          SAMPLE_TABLE: !Ref SampleTable
          SERVICE_NAME: item_service
          ENABLE_DEBUG: false
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Tags:
        - Key: 'lambda:createdBy'
          Value: SAM
      TracingConfig:
        Mode: Active
  GetByIdLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: getByIdFunction
    Properties:
      LogGroupName: !Sub '/aws/lambda/${getByIdFunction}'
      RetentionInDays: 7
  putItemFunction:
    DependsOn: CopyZips
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub 'chapter-07/monitoring-app.zip'
      Description: >-
        A simple example includes a HTTP post method to add one item to a
        DynamoDB table.
      Handler: src/handlers/put-item.putItemHandler
      MemorySize: 128
      Role: !GetAtt 
        - putItemFunctionRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 100
      Environment:
        Variables:
          APP_NAME: !Ref SampleTable
          SAMPLE_TABLE: !Ref SampleTable
          SERVICE_NAME: item_service
          ENABLE_DEBUG: false
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Tags:
        - Key: 'lambda:createdBy'
          Value: SAM
      TracingConfig:
        Mode: Active
  getByIdFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'
      Policies:
        - PolicyName: getByIdFunctionRolePolicy0
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:ConditionCheckItem'
                Resource:
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                    - tableName: !Ref SampleTable
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                    - tableName: !Ref SampleTable
        - PolicyName: getByIdFunctionRolePolicy1
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
      Tags:
        - Key: 'lambda:createdBy'
          Value: SAM
  ApiAccessLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: Api
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${Api}'
      RetentionInDays: 7
  SampleTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 5
  getAllItemsFunctionApiPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref getAllItemsFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/items
        - __ApiId__: !Ref Api
          __Stage__: '*'
  getAllItemsFunction:
    DependsOn: CopyZips
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !Ref 'LambdaZipsBucket'
        S3Key: !Sub 'chapter-07/monitoring-app.zip'
      Description: >-
        A simple example includes a HTTP get method to get all items from a
        DynamoDB table.
      Handler: src/handlers/get-all-items.getAllItemsHandler
      MemorySize: 128
      Role: !GetAtt 
        - getAllItemsFunctionRole
        - Arn
      Runtime: nodejs12.x
      Timeout: 100
      Environment:
        Variables:
          APP_NAME: !Ref SampleTable
          SAMPLE_TABLE: !Ref SampleTable
          SERVICE_NAME: item_service
          ENABLE_DEBUG: false
          AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
      Tags:
        - Key: 'lambda:createdBy'
          Value: SAM
      TracingConfig:
        Mode: Active
  PutItemLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: putItemFunction
    Properties:
      LogGroupName: !Sub '/aws/lambda/${putItemFunction}'
      RetentionInDays: 7
  putItemFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'
      Policies:
        - PolicyName: putItemFunctionRolePolicy0
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:ConditionCheckItem'
                Resource:
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                    - tableName: !Ref SampleTable
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                    - tableName: !Ref SampleTable
        - PolicyName: putItemFunctionRolePolicy1
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
      Tags:
        - Key: 'lambda:createdBy'
          Value: SAM
  Api:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Body:
        info:
          version: '1.0'
          title: !Ref 'AWS::StackName'
        paths:
          '/items/{id}':
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getByIdFunction.Arn}/invocations
              responses: {}
          /items:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${putItemFunction.Arn}/invocations
              responses: {}
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub >-
                  arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getAllItemsFunction.Arn}/invocations
              responses: {}
        swagger: '2.0'
  getAllItemsFunctionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
        - 'arn:aws:iam::aws:policy/CloudWatchLambdaInsightsExecutionRolePolicy'
      Policies:
        - PolicyName: getAllItemsFunctionRolePolicy0
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Scan'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:ConditionCheckItem'
                Resource:
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}
                    - tableName: !Ref SampleTable
                  - !Sub 
                    - >-
                      arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tableName}/index/*
                    - tableName: !Ref SampleTable
        - PolicyName: getAllItemsFunctionRolePolicy1
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
      Tags:
        - Key: 'lambda:createdBy'
          Value: SAM
  GetAllItemsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    DependsOn: getAllItemsFunction
    Properties:
      LogGroupName: !Sub '/aws/lambda/${getAllItemsFunction}'
      RetentionInDays: 7
  putItemFunctionApiPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref putItemFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/POST/items
        - __ApiId__: !Ref Api
          __Stage__: '*'
  ApiProdStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeploymentb4e29450bc
      RestApiId: !Ref Api
      StageName: Prod
      TracingEnabled: true
  ApiDeploymentb4e29450bc:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: 'RestApi deployment id: b4e29450bc8295818ad2b7ea2ad2a74c83e93406'
      RestApiId: !Ref Api
      StageName: Stage
  getByIdFunctionApiPermissionProd:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref getByIdFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 
        - >-
          arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${__ApiId__}/${__Stage__}/GET/items/*
        - __ApiId__: !Ref Api
          __Stage__: '*'
